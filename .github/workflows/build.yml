name: Build Nes-Emulator

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: [Release, Debug]

    steps:
      - uses: actions/checkout@v4

      - name: Install build tools
        run: sudo apt-get install -y build-essential cmake zip curl unzip

      - name: Install dependencies
        run: |
          sudo apt-get install -y pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libxtst-dev libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev libpipewire-0.3-dev libwayland-dev libdecor-0-dev liburing-dev
          curl -LO https://github.com/libsdl-org/SDL/releases/download/release-3.2.10/SDL3-3.2.10.zip
          unzip SDL3-3.2.10.zip
          cd SDL3-3.2.10
          mkdir build && cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/SDL3-installed
          make -j$(nproc)
          make install
          git clone https://github.com/DaveGamble/cJSON.git
          cd cJSON
          mkdir build && cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/cJSON-installed -DENABLE_CJSON_TEST=Off -DBUILD_SHARED_LIBS=On
          cmake --build . --config Release
          cmake --install .

      - name: Configure CMake (${{ matrix.config }})
        run: |
          mkdir -p build-${{ matrix.config }}
          cd build-${{ matrix.config }}
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.config }} \
            -DSDL3_DIR=$GITHUB_WORKSPACE/SDL3-installed/lib/cmake/SDL3 \
            -DcJSON_DIR=$GITHUB_WORKSPACE/cJSON-installed/lib/cmake/cJSON

      - name: Build
        run: |
          cd build-${{ matrix.config }}
          make

      - name: Package
        run: |
          cd build-${{ matrix.config }}
          mkdir package
          cp NesEmu package/
          cp ../README.md package/
          cp $GITHUB_WORKSPACE/SDL3-installed/lib/libSDL3.so* package/
          cp $GITHUB_WORKSPACE/cJSON-installed/lib/libcjson.so* package/
          cd package
          zip -r ../../linux-${{ matrix.config }}.zip .

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.config }}
          path: linux-${{ matrix.config }}.zip

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        config: [Release, Debug]

    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          Invoke-WebRequest -Uri "https://github.com/libsdl-org/SDL/releases/download/release-3.2.10/SDL3-devel-3.2.10-VC.zip" -OutFile "SDL3.zip"
          Expand-Archive -Path SDL3.zip -DestinationPath C:\SDL3
          Remove-Item -Force SDL3.zip
          git clone https://github.com/DaveGamble/cJSON.git
          cd cJSON
          mkdir build; cd build
          cmake .. -DCMAKE_INSTALL_PREFIX="C:\cJSON"  -DENABLE_CJSON_TEST=Off -DBUILD_SHARED_LIBS=On
          cmake --build . --config Release; cmake --install .

      - name: Configure CMake (${{ matrix.config }})
        run: |
            mkdir -p build-${{ matrix.config }}
            cd build-${{ matrix.config }}
            cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.config }} -G "Visual Studio 17 2022" -DSDL3_DIR=C:\SDL3\SDL3-3.2.10\cmake -DcJSON_DIR=C:\cJSON\lib\cmake\cJSON

      - name: Build
        run: |
          cd build-${{ matrix.config }}
          cmake --build . --config ${{ matrix.config }}

      - name: Package
        run: |
          cd build-${{ matrix.config }}
          mkdir package
          cp ${{ matrix.config }}/NesEmu.exe package/
          cp ../README.md package/
          cp C:/SDL3/SDL3-3.2.10/lib/x64/SDL3.dll package/
          cp C:/cJSON/bin/cjson.dll package/
          cd package
          Compress-Archive -Path * -DestinationPath ../../windows-${{ matrix.config }}.zip

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.config }}
          path: windows-${{ matrix.config }}.zip
